【1】设备驱动
     1.字符设备    对应的设备文件是  c ， 一般访问都是顺序访问
	 2.块设备      对应的设备文件    b ,  一般访问访问都是随机访问
	 3.网络设备    对应的设备文件是  无， 有统一的接口

【2】VFS :虚拟文件系统，为应用程序提供统一的接口

【3】字符设备 （字节的形式访问）
	设备号：32bit 无符号整数
		：主设备号，次设备号
			高12bit 为主设备号，低20bit为次设备号
			int  devmax=250;
			int  devmin =0;
			dev_t  devno  = devmax<<20 | devmin;

	查看系统注册的设备号
	cat  /proc/devices 

	1.申请设备号
		dev_t  devno  = MKDEV(devmax,devmin);

    2.注册设备号
		int ret;
		ret = register_chrdev_region(devno, 1, "hello");
		if(0 != ret ) {
			printk("register_chrdev_region  fail \n");
			return  0;
		}

		返回值：为0 表示成功，失败返回错误码
		参数：dev_t  from:  设备号    
	         unsigned count: 申请设备号的个数
			 const char *name:设备或者驱动的名字

	3.设备号的释放
	卸载函数
	unregister_chrdev_region
	对应的头文件   linux/fs.h

	返回值：void 
	参数：
		dev_t  设备号
		count    设备号的个数

	4.初始化cdev结构体: 分配空间,file_operations

	全局：struct cdev  *cdev：//分配空间
	                    cdev；

	struct file_operations hello_ops = {
		/*
		   open
		   read
		   write
		   close

		 */
	};

	5.初始化cdev结构体
	cdev_init(struct  cdev *cdev, struct file_operations *ops);
	
	返回值：void 
	参数：
		cdev结构体
		file_operations:操作函数的接口	

	cdev_init(&cdev,&hello_ops);
	 
	6.将cdev注册到系统中
	cdev_add(struct cdev *cdev, dev_t devno, unsigned count);
	返回值：成功返回0，失败返回错误码
	参数：
		cdev结构体
		设备号 
		次设备号的个数

   7.从系统中删除cdev
	   cdev_del(&cdev);
	   返回值：无

【4】 创建设备文件
	sudo mknod /dev/hello_write c 220 0
