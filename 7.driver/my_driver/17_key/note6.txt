【1】中断处理函数需要注意的事项：
	1.不能有耗时的操作
	2.不能有引起睡眠的操作


【2】中断号
  内部中断号：time  adc
  外部中断号：key
 【3】linux中断子系统
   主要做的两件事
   1.维护了中断子系统描述表

   struct   irq_desc
{

	unsigned  int  irq;描述中断号
	struct  timer_rand_state *  timer_rand_state；
	//指向  timer_rand_state 

	struct irqaction  *action;//action  指向中断号对应的结构体


}

struct  irqaction{

	irq_handler_t  handler;//中断处理函数 
	unsigned long  flag;//中断的触发方式
	const  char  *name；//中断设备的名字
	void  *dev_id;//设备标识
	struct irqaction  *next;//指向下一个中断
	int  irq；//中断号 
	struct  proc_dir_entry  *dir;//指向的是irq相关的描述符
}
【3】中断的注册
内部中断号：/arch/arm/mach-s5pc100/include/mach/irqs.h
外部中断号：/arch/arm/plat-s5p/include/plat/irqs.h

key  IRQ_EINT(1)  2  3  4  6  7


request_irq(unsigned  int  irq,irq_handler_t  handler,unsigned  long flag,
		const  char  *name,void  * dev);

返回值：成功返回0，失败返回错误码

参数：irq  ：中断号      IRQ_EINT(1)
	  handler：中断处理函数 
	  flag:中断的触发方式

	   IRQF_TRIGGER_RISING  上升沿触发
	   IRQF_TRIGGER_FALLING  下降沿触发
	   IRQF_TRIGGER_HIGH    高电平触发
	   IRQF_TRIGGER_LOW    低电平触发

	   中断的类型：IRQF_DISABLED独占式
	   				IRQ_SHARED   共享中断
		name:中断的名字
		dev：NULL  独占式
		           共享中断 

中断处理函数 

irqreturn_t   hello_handler(int irqno ,void  * arg)
{

	return 1.IRQ_NONE;
	       2.IRQ_HANDLED;/////////////////
		   3.IRQ_WAKE_THREAD;
}


int  ret;


ret  =
request_irq(IRQ_EINT(1),hello_handler,IRQF_TRIGGER_FALLING|IRQF_DISABLED,“key1”，NULL);

按键操作：


1.模块的申明
  MODULE_LICENSE();
2.加载函数

    自定义加载函数
	 1.申请设备号
	    MKDEV
	 2.注册设备号
	   register_chrdev_region
	 3.初始化cdev
	   cdev_init

	     1.填充file_operations  
		       open
			   read

			   if(size  < 0 || size > 4)
	              return   -EINVAL;
			   wait_event(readq,flag !=0);
					copy_to_user(buff,&key,sizeof(int));



				flag  = 0;
			   write
			   release
			   poll
			   fasync
			   unlocked_ioctl
	 4.cdev  添加到系统中
	    cdev_add
		  删除设备号


	 5.注册中断
	  ret  = request_irq(中断号，中断处理函数，中断的类型|中断的触发方式，中断的名字，NULL);
 		删除cdev
		request_irq
		free_irq
	 6.中断处理函数 
	 int  flag  = 0;
	   irqreturn_t  hello_handler(int irqno,void  *arg)
		{
		
			switch(irqno)
			{
			
				case   中断号：
					key  =1；
					flag  ++;
					wake_up();


					break;

			}
		}
		  

3.卸载函数

    删除cdev
	  cdev_del
	设备号
	  unregister_chrdev_region
   自定义卸载函数



