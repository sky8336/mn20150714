【1】int  open(struct inode *inode,struct file *file)

	参数：对应的inode结构体，inode用来描述文件的信息,(文件的属性，文件的类型)

	      file结构体

		  作用：识别次设备号
		        初始化
				文件打开的次数



【2】ssize_t read(struct file *file,_char _user buff,ssize  size,loff_t loff)

    参数：file结构体
	      buff：从驱动层传递到用户层
		  __user:用户的数据
		  size：读数据的大小
		  loff： 偏移量

【3】用户和内核 传递数据
   

   1.copy_to_user(to,from,n);
	参数  to:用户空间
	     from：内核空间
		 n：从内核空间拷贝的字节数
    返回值：成功返回0，失败返回未读取的数据


	注意：应用程序open会调用底层驱动open,当应用程序退出，驱动会自动执行release
	函数；如果应用程序不退出，驱动不会执行release函数；


//note4.txt
【1】copy_from_user(to,from,size)

	参数：to  内核空间
	    ：from   用户空间
		size：拷贝数据的大小

		返回值：成功返回0，失败返回未拷贝的字节数


【2】ioctl   linux 宏 命令
type:数据的类型    'k'
nr：序列号          默认的序列号为0
   _IO(type,nr)  //没有数据传递的命令
  _IOR(type,nr,size)//从驱动中读取数据
  _IOW(type,nr,size) //向驱动中写数据
  _IOWR(type,nr,size)//从驱动中读写数据
	size：用户传递的数据的类型
 【3】自动分配设备号
    alloc_chrdev_region(devno,baseminor,countr
			name);
	参数： devno :设备号
	       baseminor:第一个次设备号
		   count：次设备号的个数
【4】创建类
   class_create(owner，name);
    owner:THIS_MODULE
	name:类名，文件名字
【5】创建设备节点
 	device_create(struct class *,struct device *device,devno,char *data,char *name);
	device_create(cls,NULL,devno,NULL,"led");

//note5.txt
【1】次设备号的识别
	inode ->dev_t

	次设备号识别的函数
	iminor ();

【2】并发控制

 并发：多个进程同时执行
 优点：高效
 缺点：可能存在多个进程同时操作同一个资源，会产生竞争资源
